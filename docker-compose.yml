version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: awesome-nest-app
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
    environment:
      - NODE_ENV=production
      - DB_HOST=awesome-nest-db
      - DB_PORT=5432
    depends_on:
      - awesome-nest-db
    env_file:
      - .env
    networks:
      - awesome-nest-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  awesome-nest-db:
    image: postgres:16-alpine
    container_name: awesome-nest-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-awesome_nest}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      TZ: 'GMT'
      PGTZ: 'GMT'
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - awesome-nest-db-vol:/var/lib/postgresql/data
      - type: bind
        source: ./init-data.sh
        target: /docker-entrypoint-initdb.d/init-data.sh
        read_only: true
    env_file:
      - .env
    networks:
      - awesome-nest-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-awesome_nest}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  awesome-nest-network:
    driver: bridge

volumes:
  awesome-nest-db-vol:
    driver: local
